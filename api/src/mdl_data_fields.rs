use std::collections::BTreeMap;

pub fn minimal_mdl_request() -> BTreeMap<Option<String>, Option<bool>> {
    BTreeMap::from([
        (Some("family_name".to_string()), Some(true)),
        (Some("given_name".to_string()), Some(true)),
        (Some("birth_date".to_string()), Some(true)),
        (Some("issue_date".to_string()), Some(true)),
        (Some("expiry_date".to_string()), Some(true)),
        (Some("issuing_country".to_string()), Some(true)),
        (Some("issuing_authority".to_string()), Some(true)),
        (Some("document_number".to_string()), Some(true)),
        (Some("portrait".to_string()), Some(true)),
        (Some("driving_privileges".to_string()), Some(true)),
        (Some("un_distinguishing_sign".to_string()), Some(true)),
        (Some("administrative_number".to_string()), Some(true)),
        (Some("sex".to_string()), Some(true)),
        (Some("height".to_string()), Some(true)),
        (Some("weight".to_string()), Some(true)),
        (Some("eye_colour".to_string()), Some(true)),
        (Some("hair_colour".to_string()), Some(true)),
        (Some("birth_place".to_string()), Some(true)),
        (Some("resident_address".to_string()), Some(true)),
        (Some("portrait_capture_date".to_string()), Some(true)),
        (Some("age_in_years".to_string()), Some(true)),
        (Some("age_birth_year".to_string()), Some(true)),
        (Some("age_over_18".to_string()), Some(true)),
        (Some("age_over_21".to_string()), Some(true)),
        (Some("issuing_jurisdiction".to_string()), Some(true)),
        (Some("nationality".to_string()), Some(true)),
        (Some("resident_city".to_string()), Some(true)),
        (Some("resident_state".to_string()), Some(true)),
        (Some("resident_postal_code".to_string()), Some(true)),
        (Some("resident_country".to_string()), Some(true)),
    ])
}

pub fn age_over_mdl_request() -> BTreeMap<Option<String>, Option<bool>> {
    BTreeMap::from([
        (Some("age_over_18".to_string()), Some(true)),
    ])
}

pub fn _aamva_mdl_fields() -> Vec<String> {
    vec![
        "org.iso.18013.5.1.family_name".to_string(),
        "org.iso.18013.5.1.given_name".to_string(),
        "org.iso.18013.5.1.birth_date".to_string(),
        "org.iso.18013.5.1.issue_date".to_string(),
        "org.iso.18013.5.1.expiry_date".to_string(),
        "org.iso.18013.5.1.issuing_country".to_string(),
        "org.iso.18013.5.1.issuing_authority".to_string(),
        "org.iso.18013.5.1.document_number".to_string(),
        "org.iso.18013.5.1.portrait".to_string(),
        "org.iso.18013.5.1.driving_privileges".to_string(),
        "org.iso.18013.5.1.un_distinguishing_sign".to_string(),
        "org.iso.18013.5.1.administrative_number".to_string(),
        "org.iso.18013.5.1.sex".to_string(),
        "org.iso.18013.5.1.height".to_string(),
        "org.iso.18013.5.1.weight".to_string(),
        "org.iso.18013.5.1.eye_colour".to_string(),
        "org.iso.18013.5.1.hair_colour".to_string(),
        "org.iso.18013.5.1.birth_place".to_string(),
        "org.iso.18013.5.1.resident_address".to_string(),
        "org.iso.18013.5.1.portrait_capture_date".to_string(),
        "org.iso.18013.5.1.age_in_years".to_string(),
        "org.iso.18013.5.1.age_birth_year".to_string(),
        "org.iso.18013.5.1.age_over_18".to_string(),
        "org.iso.18013.5.1.age_over_21".to_string(),
        "org.iso.18013.5.1.issuing_jurisdiction".to_string(),
        "org.iso.18013.5.1.nationality".to_string(),
        "org.iso.18013.5.1.resident_city".to_string(),
        "org.iso.18013.5.1.resident_state".to_string(),
        "org.iso.18013.5.1.resident_postal_code".to_string(),
        "org.iso.18013.5.1.resident_country".to_string(),
        "org.iso.18013.5.1.aamva.domestic_driving_privileges".to_string(),
        "org.iso.18013.5.1.aamva.name_suffix".to_string(),
        "org.iso.18013.5.1.aamva.organ_donor".to_string(),
        "org.iso.18013.5.1.aamva.veteran".to_string(),
        "org.iso.18013.5.1.aamva.family_name_truncation".to_string(),
        "org.iso.18013.5.1.aamva.given_name_truncation".to_string(),
        "org.iso.18013.5.1.aamva.aka_family_name.v2".to_string(),
        "org.iso.18013.5.1.aamva.aka_given_name.v2".to_string(),
        "org.iso.18013.5.1.aamva.weight_range".to_string(),
        "org.iso.18013.5.1.aamva.race_ethnicity".to_string(),
        "org.iso.18013.5.1.aamva.EDL_credential".to_string(),
        "org.iso.18013.5.1.aamva.DHS_compliance".to_string(),
        "org.iso.18013.5.1.aamva.sex".to_string(),
        "org.iso.18013.5.1.aamva.resident_county".to_string(),
        "org.iso.18013.5.1.aamva.hazmat_endorsement_expiration_date".to_string(),
        "org.iso.18013.5.1.aamva.CDL_indicator".to_string(),
        "org.iso.18013.5.1.aamva.DHS_compliance_text".to_string(),
        "org.iso.18013.5.1.aamva.DHS_temporary_lawful_status".to_string(),
    ]
}
